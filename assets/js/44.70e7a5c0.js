(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{449:function(t,s,a){"use strict";a.r(s);var e=a(41),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式学习"}},[t._v("#")]),t._v(" 正则表达式学习")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("em",[t._v("2020/11/22")])]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("正则表达式")]),t._v("在前端的重要性无需多言，今天网上找了一篇得赞比较多的文章简单学习下正则表达式。")])]),t._v(" "),a("h2",{attrs:{id:"正则基础知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则基础知识点"}},[t._v("#")]),t._v(" 正则基础知识点")]),t._v(" "),a("h3",{attrs:{id:"元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("元字符")]),t._v(" 是构造正则表达式的一种基本元素，常用的元字符有：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("元字符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v(".")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配除换行符以外的任意字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字母或数字或下划线或汉字")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\s")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意的空白符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\d")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配数字")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配单词的开始或结束")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串的开始")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串的结束")])])])])]),t._v(" "),a("h3",{attrs:{id:"重复限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复限定符"}},[t._v("#")]),t._v(" 重复限定符")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("语法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复零次或更多次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("+")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复一次或更多次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("?")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复零次或一次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n}")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复n次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n,}")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复n次或更多次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n,m}")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复n到m次")])])])]),t._v(" "),a("p",[t._v("匹配1开头11位数字的手机号码")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("^")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{10}")]),a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("$")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("如果想匹配以a开头的，0个或多个b结尾的字符串，写法如下:")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("^")]),t._v("ab"),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("$")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果想要ab同时被*限定呢？可以使用小括号。"),a("strong",[t._v("正则表达式中用小括号()来做分组，也就是括号中的内容作为一个整体。")]),t._v(" ，因此当要匹配多个ab时，可以这样：")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),t._v("ab"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("*")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义"}},[t._v("#")]),t._v(" 转义")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("我们看到正则表达式用小括号来做分组，那 "),a("strong",[t._v("如果要匹配的字符串中本身就包含小括号，那该怎么办")]),t._v("，针对这种情况，正则提供了转义的方式，也就是把这些元字符、限定符或者关键字转义成普通的字符，做法很简单，就是在要转义的字符前面加个斜杠(\\)即可。")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token special-escape escape"}},[t._v("\\(")]),t._v("ab"),a("span",{pre:!0,attrs:{class:"token special-escape escape"}},[t._v("\\)")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("*")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"条件或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件或"}},[t._v("#")]),t._v(" 条件或")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("回到刚才的手机号匹配，我们都知道：国内号码都来自三大网，它们都有属于自己的号段，比如联通有 130/131/132/155/156/185/186/145/176等号段，假如让我们匹配一个联通的号码，那按照我们目前所学的正则，应该无从下手，因为这里包含了一些并列的条件，也就是“或”，那么在正则中是如何表示“或”的呢？")]),t._v(" "),a("p",[a("strong",[t._v("正则用户号 | 来表示或，也叫做分支条件，当满足正则里的分支条件的任何一种条件时，都会当成是匹配成功。")])]),t._v(" "),a("p",[t._v("那么我们就可以用或条件来处理这个问题：")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),t._v("130"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("131"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("132"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("155"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("156"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("185"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("186"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("145"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("176"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{8}")]),a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("$")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"区间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区间"}},[t._v("#")]),t._v(" 区间")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("上面的例子，还可以用区间继续简化。")]),t._v(" "),a("p",[a("strong",[t._v("正则提供一个元字符中括号来表示区间条件。")])]),t._v(" "),a("ul",[a("li",[t._v("限定0到9可以写成 [0-9]")]),t._v(" "),a("li",[t._v("限定A-Z写成 [A-Z]")]),t._v(" "),a("li",[t._v("限定某些数字 [165]")])]),t._v(" "),a("p",[t._v("上面的正则可以改成：")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),t._v("13"),a("span",{pre:!0,attrs:{class:"token charset"}},[a("span",{pre:!0,attrs:{class:"token charset-punctuation punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token range"}},[t._v("0"),a("span",{pre:!0,attrs:{class:"token range-punctuation operator"}},[t._v("-")]),t._v("2")]),a("span",{pre:!0,attrs:{class:"token charset-punctuation punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),t._v("15"),a("span",{pre:!0,attrs:{class:"token charset"}},[a("span",{pre:!0,attrs:{class:"token charset-punctuation punctuation"}},[t._v("[")]),t._v("56"),a("span",{pre:!0,attrs:{class:"token charset-punctuation punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),t._v("18"),a("span",{pre:!0,attrs:{class:"token charset"}},[a("span",{pre:!0,attrs:{class:"token charset-punctuation punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token range"}},[t._v("5"),a("span",{pre:!0,attrs:{class:"token range-punctuation operator"}},[t._v("-")]),t._v("6")]),a("span",{pre:!0,attrs:{class:"token charset-punctuation punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("145"),a("span",{pre:!0,attrs:{class:"token alternation keyword"}},[t._v("|")]),t._v("176"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{8}")]),a("span",{pre:!0,attrs:{class:"token anchor function"}},[t._v("$")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h2",{attrs:{id:"正则进阶知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则进阶知识点"}},[t._v("#")]),t._v(" 正则进阶知识点")]),t._v(" "),a("h3",{attrs:{id:"零宽断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零宽断言"}},[t._v("#")]),t._v(" 零宽断言")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("无论是零宽还是断言，听起来都古古怪怪的，先解释下这两个词。")]),t._v(" "),a("p",[a("strong",[t._v("断言：")]),t._v(' 俗话的断言就是 "我断定什么什么"，而正则中的断言，就是说正则可以指明在指定的内容前面或后面会出现满足指定规则的内容，意思是正则也可以像人类那样断定什么什么，比如 "ss1aa2bb3"，正则可以用断言找出aa2前面有ss1，也可以找出aa2后面有bb3。')]),t._v(" "),a("p",[a("strong",[t._v("零宽：")]),t._v(" 也就是没有宽度，在正则中，断言只是匹配位置，不占字符，也就是说，匹配结果里是不会返回断言本身。")]),t._v(" "),a("p",[t._v("听了还是糊里糊涂，举个例子吧")]),t._v(" "),a("p",[t._v("假设我们要用爬虫取 csdn 里的文章阅读量。通过查看源代码可以看到文章阅读量这个内容是这样的结构：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v('"'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("read-count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("阅读数：641"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其中也就 '641' 这个是变量，也就是说不同文章不同的值，当我们拿到这个字符串时，需要获得里边的 '641' 有很多种办法，但是正则应该怎么匹配呢？")]),t._v(" "),a("p",[t._v("下面先讲几种类型的断言。")])]),t._v(" "),a("h4",{attrs:{id:"正向先行断言-正前瞻"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向先行断言-正前瞻"}},[t._v("#")]),t._v(" 正向先行断言(正前瞻)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("语法：")]),t._v(" (?=pattern)\n"),a("strong",[t._v("作用：")]),t._v(" 匹配pattern表达式的前面内容，不返回本身。")]),t._v(" "),a("p",[t._v("回到刚才的例子，要取阅读量，在正则表达式中就意味着要能匹配到 "),a("code",[t._v("'</span>'")]),t._v(" 前面的数字内容。按照上所说的正向先行断言可以匹配表达式前面的内容，那意思就是: (?=</span>) 就可以匹配到前面的内容了。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<span class=\"read-count\">阅读数：641</span>'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(?=")]),t._v("<"),a("span",{pre:!0,attrs:{class:"token escape"}},[t._v("\\/")]),t._v("span>"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <span class="read-count">阅读数：641')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("我们只要阅读数 '641' ，那也简单，匹配数字 \\d，那可以改成：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<span class=\"read-count\">阅读数：641</span>'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(?=")]),t._v("<"),a("span",{pre:!0,attrs:{class:"token escape"}},[t._v("\\/")]),t._v("span>"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 641")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])]),t._v(" "),a("h4",{attrs:{id:"正向后行断言-正后顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向后行断言-正后顾"}},[t._v("#")]),t._v(" 正向后行断言(正后顾)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("语法：")]),t._v(" (?<=pattern)\n"),a("strong",[t._v("作用：")]),t._v(" 匹配pattern表达式的后面的内容，不返回本身。")]),t._v(" "),a("p",[t._v("有先行就有后行，先行是匹配前面的内容，那后行就是匹配后面的内容。")]),t._v(" "),a("p",[t._v("上面的例子，我们也可以用后行断言来处理。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<span class=\"read-count\">阅读数：641</span>'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(?<=")]),a("span",{pre:!0,attrs:{class:"token escape"}},[t._v("\\<")]),t._v("span class="),a("span",{pre:!0,attrs:{class:"token escape"}},[t._v('\\"')]),t._v("read-count"),a("span",{pre:!0,attrs:{class:"token escape"}},[t._v('\\"')]),t._v(">阅读数："),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("+")])]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 641")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])]),t._v(" "),a("h4",{attrs:{id:"负向先行断言-负前瞻"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负向先行断言-负前瞻"}},[t._v("#")]),t._v(" 负向先行断言(负前瞻)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("语法：")]),t._v(" (?!pattern)\n"),a("strong",[t._v("作用：")]),t._v(" 匹配非pattern表达式的前面的内容，不返回本身。")]),t._v(" "),a("p",[t._v("有正向也有负向，负向在这里其实是非的意思。")]),t._v(" "),a("p",[t._v('举个例子：比如有一句  "我爱祖国, 我是祖国的花朵"')]),t._v(" "),a("p",[t._v('现在要找到不是 "的花朵" 前面的祖国，用正则就可以这样写：')]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[t._v("祖国"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(?!")]),t._v("的花朵"),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h4",{attrs:{id:"负向后行断言-负后顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负向后行断言-负后顾"}},[t._v("#")]),t._v(" 负向后行断言(负后顾)")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("语法：")]),t._v(" (?<!pattern)\n"),a("strong",[t._v("作用：")]),t._v(" 匹配非pattern表达式的后面的内容，不返回本身。")])]),t._v(" "),a("h3",{attrs:{id:"贪婪和非贪婪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪和非贪婪"}},[t._v("#")]),t._v(" 贪婪和非贪婪")]),t._v(" "),a("h4",{attrs:{id:"贪婪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪"}},[t._v("#")]),t._v(" 贪婪")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("我们都知道，贪婪是不满足，尽可能多的要，在正则中，贪婪也是差不多的意思：")]),t._v(" "),a("p",[a("strong",[t._v("贪婪匹配：")]),t._v(" 当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符，这匹配方式叫做贪婪匹配。")]),t._v(" "),a("p",[a("strong",[t._v("特性：")]),t._v(" 一次性读入整个字符串进行匹配，每当不匹配就舍弃最右边一个字符，继续匹配，依次匹配和舍弃（这种匹配-舍弃的方式也叫做回溯），直到匹配成功或者把整个字符串舍弃完为止，因此它是一种最大化的数据返回，能多不会少。")]),t._v(" "),a("p",[t._v("前面我们讲过重复限定符，其实这些限定符就是贪婪量词，比如表达式：")]),t._v(" "),a("div",{staticClass:"language-regex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-regex"}},[a("code",[a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{3,6}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("用来匹配3到6位数字，在这种情况下，它是一种贪婪模式的匹配，也就是假如字符串里有6个数字可以匹配，那它就全部匹配到，如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'61762828 176 2991 44 871'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{3,6}")])]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n617628\n176   \n2991  \n871  \n*/")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("由结果可见：本来字符串中的 '61762828' 这一段，其实只需要出现3个(617) 就已经匹配成功了的，但是它并不满足，而是匹配到了最大能匹配的字符，也就是6个。")]),t._v(" "),a("p",[t._v("如果多个贪婪量词凑在一起，那他们是如何支配自己的匹配权的呢？")]),t._v(" "),a("p",[t._v("是这样的，多个贪婪在一起时，如果字符串能满足他们各自最大程度的匹配时，就互不干扰，但如果不能满足时，就会根据深度优先原则，也就是从左到右的每一个贪婪量词，优先最大数量的满足，剩余再分配下一个量词匹配。如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'61762828 176 2991 87321'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{1,2}")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{3,4}")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n617628  前面 \\d{1,2}匹配出了61，后面匹配出了 7628\n2991    前面 \\d{1,2}匹配出了2，后面匹配出了 991\n87321   前面 \\d{1,2}匹配出了97，后面匹配出了 321\n*/")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])])]),t._v(" "),a("h4",{attrs:{id:"非贪婪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪"}},[t._v("#")]),t._v(" 非贪婪")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("strong",[t._v("懒惰匹配：")]),t._v(" 当正则表达式中包含能接受重复的限定符时，通常的行为是（在屎整个表达式能得到匹配的前提下）匹配尽可能少的字符，这匹配 方式叫做懒惰匹配。")]),t._v(" "),a("p",[a("strong",[t._v("特性：")]),t._v(" 从左到右，从字符串的最左边开始匹配，每次视图不读入字符匹配，匹配成功，则完成匹配，否则读入一个字符再匹配，依次循环（读入字符、匹配）直到匹配成功或者把字符串的字符匹配完为止。")]),t._v(" "),a("p",[t._v("懒惰量词是在贪婪量词后面加个 '?'")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("代码")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("*?")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复任意次，但尽可能少重复")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("+?")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复1次或更多次，但尽可能少重复")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("??")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复0次或1次，但尽可能少重复")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n,m}?")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复n到m次，但尽可能少重复")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n,}?")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重复n次以上，但尽可能少重复")])])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'61762828 176 2991 87321'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{1,2}?")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token charclass class-name"}},[t._v("\\d")]),a("span",{pre:!0,attrs:{class:"token quantifier number"}},[t._v("{3,4}")]),a("span",{pre:!0,attrs:{class:"token group punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n61762   左边的懒惰匹配出6，右边的贪婪匹配出1762\n2991    左边的懒惰匹配出2，右边的贪婪匹配出991\n87321   左边的懒惰匹配出8，右边的贪婪匹配出7321\n*/")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"反义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反义"}},[t._v("#")]),t._v(" 反义")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("前面说到元字符的都是要匹配什么什么，当然如果想反着来，不想匹配某些字符，正则也提供了一些常用的反义元字符：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("元字符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\W")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意不是字母、数字、下划线、汉语的字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\S")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意不是空白符的字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意非数字的字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\B")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配不是单词开头或结尾的位置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("[^x]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配除了x以外的任意字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("[^aeiou]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配除了aeiou 这几个字母以外的任意字符")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/48219401",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"/frontend"}},[t._v("回首页")])])]),t._v(" "),a("p",[t._v("（完）")])])}),[],!1,null,null,null);s.default=n.exports}}]);